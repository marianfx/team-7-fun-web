-- ############# Initial Drops ##########

# DROP TABLE LOGGER_TABLE;
DROP TABLE BattlesHistory;
DROP TABLE Friends;
DROP TABLE PlayersStatistics;
DROP TABLE Guilds;
DROP TABLE Inventories;
DROP TABLE Items;
DROP TABLE Players;
DROP TABLE GameUsers;
DROP TABLE Questions;
DROP TABLE Rounds;
DROP TABLE COURSES;

CREATE TABLE COURSES
(
    COURSEID INT PRIMARY KEY NOT NULL AUTO_INCREMENT,
    TITLE VARCHAR(500) NOT NULL,
    SHORTDESC VARCHAR(1000) NOT NULL,
    HASHTAG VARCHAR(100) NOT NULL,
    PHOTOURL VARCHAR(500) DEFAULT '/images/courses/defaultCourse.png',
    AUTHOR VARCHAR(200) DEFAULT 'Community',
    CREATIONDATE TIMESTAMP DEFAULT NOW()
);



-- ############# Rounds Table ##########
CREATE TABLE Rounds (
	  ROUNDID INT NOT NULL PRIMARY KEY AUTO_INCREMENT
	, NAME VARCHAR(100) NOT NULL
  , NROFQUESTIONS INT DEFAULT 5 NOT NULL
	, COURSE VARCHAR(4000) NOT NULL
	, ROUNDTIME INT DEFAULT 300
  , COURSEID INT NOT NULL
  , POINTS INT DEFAULT 100 NOT NULL

  ,  FOREIGN KEY (courseId) REFERENCES COURSES(courseId) ON DELETE CASCADE
	);



-- ############# Questions Table ##########
CREATE TABLE Questions (
	  QUESTIONID INT NOT NULL PRIMARY KEY AUTO_INCREMENT
	, QUESTION VARCHAR(2000) NOT NULL
  , DIFFICULTY VARCHAR(10) DEFAULT 'medium' NOT NULL
	, ANSWERA VARCHAR(2000) NOT NULL
	, ANSWERB VARCHAR(2000) NOT NULL
	, ANSWERC VARCHAR(2000) NOT NULL
	, ANSWERD VARCHAR(2000) NOT NULL
	, CORRECTANSWER INT NOT NULL
	, ROUNDID INT NOT NULL

	, FOREIGN KEY (roundID) REFERENCES Rounds(roundID) ON DELETE CASCADE
	);


ALTER TABLE Questions ADD CONSTRAINT CK_CORRECT_ANSWER CHECK
(
  1 <= CORRECTANSWER
  AND
  4 >= CORRECTANSWER
);

ALTER TABLE Questions ADD CONSTRAINT CK_DIFFICULTY CHECK
(
  DIFFICULTY IN('easy','medium','hard')
);


-- ############# Guilds Table ##########
CREATE TABLE Guilds (
	  GUILDID INT NOT NULL PRIMARY KEY AUTO_INCREMENT
	, NAME VARCHAR(100) NOT NULL
	, DESCRIPTION VARCHAR(1000)
	, WINS INT DEFAULT 0 NOT NULL
	, LOSES INT DEFAULT 0 NOT NULL
	);

ALTER TABLE Guilds ADD CONSTRAINT CK_WINS_POSITIVITY CHECK
(
  WINS >= 0
);

ALTER TABLE Guilds ADD CONSTRAINT CK_LOSES_POSITIVITY CHECK
(
  LOSES >= 0
);




-- ############# GameUsers Table ##########
CREATE TABLE GameUsers (
	  PLAYERID INT NOT NULL PRIMARY KEY AUTO_INCREMENT
	, USERNAME VARCHAR(100) NOT NULL
	, EMAIL VARCHAR(100) NOT NULL
	, PASSWORD VARCHAR(100) NOT NULL
	, FACEBOOKID VARCHAR(1000)
	, ACCESSTOKEN VARCHAR(1000)
	, REGISTRATIONDATE TIMESTAMP DEFAULT NOW() NOT NULL
  , ISADMIN INT DEFAULT 0 NOT NULL
  , CONSTRAINT user_unique UNIQUE (username)
	, CONSTRAINT email_unique UNIQUE (email)
	);

ALTER TABLE GameUsers ADD CONSTRAINT CK_EMAIL_VALID CHECK
(
  email REGEXP '^[a-zA-Z][a-zA-Z0-9_\.\-]+@([a-zA-Z0-9-]{2,}\.)+([a-zA-Z]{2,4}|[a-zA-Z]{2}\.[a-zA-Z]{2})$'
);
-- ############# Players Table ##########
CREATE TABLE Players (
	  PLAYERID INT NOT NULL PRIMARY KEY
	, PLAYERNAME VARCHAR(100) NOT NULL
	, PHOTOURL VARCHAR(1000) DEFAULT '/images/avatars/defaultPlayer.png' NOT NULL
	, EXPERIENCE INT DEFAULT 0 NOT NULL
	, PLAYERLEVEL INT DEFAULT 0 NOT NULL
	, COOKIES INT DEFAULT 0 NOT NULL
	, S_LUCK INT DEFAULT 0 NOT NULL
	, S_TIME INT DEFAULT 0 NOT NULL
	, S_CHEAT INT DEFAULT 0 NOT NULL
  , SKILLPOINTS INT DEFAULT 0 NOT NULL
	, LASTROUNDID INT DEFAULT 1 REFERENCES Rounds(roundID)
	, LASTROUNDSTART TIMESTAMP
	, GUILDID INT REFERENCES Guilds(guildID)

	, FOREIGN KEY (playerID) REFERENCES GameUsers(playerID) ON DELETE CASCADE
	);

# ALTER TABLE Players MODIFY LASTROUNDSTART TIMESTAMP; COMMIT ;

ALTER TABLE Players ADD CONSTRAINT CK_SKILLPOINTS_AVAILABLE CHECK
(
  SKILLPOINTS >= 0
);

ALTER TABLE Players ADD CONSTRAINT CK_EXPERIENCE_POSITIVITY CHECK
(
  EXPERIENCE >= 0
);

ALTER TABLE Players  ADD CONSTRAINT CK_PLAYER_LEVEL_POSITIVITY CHECK
(
  PLAYERLEVEL >= 0
);

ALTER TABLE Players  ADD CONSTRAINT CK_COOCKIES_POSITIVITY CHECK
(
  COOKIES >= 0
);

ALTER TABLE Players  ADD CONSTRAINT CK_S_LUCK_POSITIVITY CHECK
(
  S_LUCK >= 0
);

ALTER TABLE Players  ADD CONSTRAINT CK_S_TIME_POSITIVITY CHECK
(
  S_TIME >= 0
);

ALTER TABLE Players  ADD CONSTRAINT CK_S_CHEAT_POSITIVITY CHECK
(
  S_CHEAT >= 0
);

ALTER TABLE Players  ADD CONSTRAINT CK_LROUND_POSITIVITY CHECK
(
  lastRoundID >= 0
);


-- ############# Friends Table ##########
CREATE TABLE Friends (
	  PLAYER1ID INT NOT NULL
	, PLAYER2ID INT NOT NULL

	, PRIMARY KEY  (
		              player1ID
		            , player2ID
		            )
	, FOREIGN KEY (player1ID) REFERENCES Players(playerID) ON DELETE CASCADE
	, FOREIGN KEY (player2ID) REFERENCES Players(playerID) ON DELETE CASCADE
	);


-- ############# PlayersStatistics Table ##########
CREATE TABLE PlayersStatistics (
	  PLAYERID INT NOT NULL PRIMARY KEY
	, WINS INT DEFAULT 0 NOT NULL
	, LOSES INT DEFAULT 0 NOT NULL
	, PERFECTROUNDS INT DEFAULT 0 NOT NULL
	, DAILYLOGINS INT DEFAULT 1 NOT NULL
	, LASTLOGINDATE TIMESTAMP DEFAULT NOW() NOT NULL

	, FOREIGN KEY (playerID) REFERENCES Players(playerID) ON DELETE CASCADE
	);

ALTER TABLE PlayersStatistics  ADD CONSTRAINT CK_STATISTIC_WINS_POSITIVITY CHECK
(
  WINS >= 0
);

ALTER TABLE PlayersStatistics  ADD CONSTRAINT CK_STATISTIC_LOSES_POSITIVITY CHECK
(
  LOSES >= 0
);

ALTER TABLE PlayersStatistics  ADD CONSTRAINT CK_DAILYLOGINS_POSITIVITY CHECK
(
  DAILYLOGINS >= 0
);


-- ############# Items Table ##########
CREATE TABLE Items (
	  ITEMID INT NOT NULL PRIMARY KEY AUTO_INCREMENT
	, NAME VARCHAR(1000) NOT NULL
	, DESCRIPTION VARCHAR(2000) NOT NULL
	, SKILLPOINTS INT -- can be null when the item represents course notes
	, SKILL VARCHAR(100) -- same
	, COOKIESCOST INT NOT NULL
	, FILEPATH VARCHAR(2000) DEFAULT '/images/items/defaultItem.png' NOT NULL
	);

ALTER TABLE Items ADD CONSTRAINT CK_SKILLPOINTS_POSITIVITY CHECK
(
  SKILLPOINTS >= 0
);

ALTER TABLE Items ADD CONSTRAINT CK_SKILL_TYPE CHECK
(
  SKILL IN ('S_LUCK','S_TIME', 'S_CHEAT')
);

ALTER TABLE Items ADD CONSTRAINT CK_COOKIESCOST_POSITIVITY CHECK
(
  COOKIESCOST >= 0
);


-- ############# Inventories Table ##########
CREATE TABLE Inventories (
	  PLAYERID INT NOT NULL
	, ITEMID INT NOT NULL

	, PRIMARY KEY (
		              playerID
		            , itemID
		            )
	, FOREIGN KEY (playerID) REFERENCES Players(playerID) ON DELETE CASCADE
	, FOREIGN KEY (itemID) REFERENCES Items(itemID) ON DELETE CASCADE
	);


-- ############# BattlesHistory Table ##########
CREATE TABLE BattlesHistory
(
    BATTLEID INT NOT NULL PRIMARY KEY
  , PLAYER1ID INT NOT NULL REFERENCES Players(playerID)
  , PLAYER2ID INT NOT NULL REFERENCES Players(playerID)
  , WINNER INT
);

ALTER TABLE BattlesHistory ADD CONSTRAINT CK_VALID_WINNER CHECK
(
  WINNER IN (0, 1, 2)
);


############# lOGGER_table Table ##########
# CREATE TABLE LOGGER_TABLE
# (
#       DATE_ADDED  DATE
#     , OPERATION   VARCHAR(1000)
# );

COMMIT;
